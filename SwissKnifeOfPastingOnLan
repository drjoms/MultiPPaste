#!/usr/bin/python3           # This is client.py file
'''
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
'''


#note to self:
#GUI/kivi
#SSL
#file sending
#warning about unsafe use(no ssl yet, no file barriers against over writing)
#send several files
#import subprocess
#first_parameter = sys.argv[1]
#if first_parameter:
#    print("nope?")
#need to fix help message that is potentially not needed
#add interractive mode(where no parameters are used and user can choose options# )
#when recieve message to clear ip address info
#to add ip address info on doze PC
#reveiving mode, auto realise what kind of sending mode client is in(message from client must contain this info)
#perhaps add video download from video site on computer and autocopy to reciving device
#filesend function needs fix
#security identities as alternative to SSL(chain of trust)
#IPv6 support
#config file
#platform auto detection
#increase size of file being send
import socket
import sys
#import subprocess
import os

type_of_app='console' #must change based on type of platform used0
port=9999 #network port on which listener will listen and to which sender will connect to

positional_parameter = sys.argv[1:]

try: mode = positional_parameter[0]
except:
    mode = 'no parameters'
    print(mode)

def app_output(*args):
    if type_of_app == 'console':
        print (*args)

def app_input(*args):
    usr_input
    if type_of_app == 'console':
        usr_input = input(*args)

    return usr_input


def help_msg():
    app_output('\nTo Listen "l" or do noting and app will listen by default.In this mode program will receive file or line or multiline and not send anything.\
        \nBy default app stars in Listen mode\
        \nTo send line "sl" (exmp: sl 192.168.1.45  WHAT I WANT TO SEND AS TEXT)\
        \nTo send multiline "sm" (same as above, but you can have unlimited ammount of lines there. Command is stuck in loop untill you shut it down, because there is no waty to know how many lines you need to send.)\
        \nTo send file "sf" (exmp: sf 127.0.0.1  Valid_filename.txt )\
        \nIn Linux console to kill it - Ctrl + C')

def clear_screen():
    try:
        os.system('clear')
    except:
        print('')

    try:
        os.system('clr')
    except:
        print('')


def listen():
    os.system('ip -4 addr|grep inet')
#    subprocess.run("ip addr|grep inet|grep -v inet6", shell=True) #commented because does not work in qpython(android)
    host = '0.0.0.0'
    serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    serversocket.bind((host, port))
    serversocket.listen(1)  # queue up to 1 requests
#    print(serversocket.getsockname())
    mode='invalid mode'
    #default mode

    while mode != 'valid':
        clientsocket, addr = serversocket.accept()
        print("Got a connection from %s" % str(addr))
        print('\n')


        incmdata = clientsocket.recv(1024)
        #incmdata = clientsocket.recv()
        mode = incmdata.decode('UTF-8')
#        print(mode, '-this is mode \n')
        #app_output(incmdata.decode('UTF-8'))
        clientsocket.close()

        if mode == 'sl':
            clientsocket, addr = serversocket.accept()
            incmdata = clientsocket.recv(10240)
            app_output(incmdata.decode('UTF-8'))
            mode = 'valid'
            clientsocket.close()


        if mode == 'sp':
            clientsocket, addr = serversocket.accept()
            incmdata = clientsocket.recv(1024*8)
            app_output(incmdata.decode())
            mode = 'valid'
            clientsocket.close()

#to send file is next
        if mode == 'sf':

            clientsocket, addr = serversocket.accept()
            filename = clientsocket.recv(10240)
            filename = filename.decode('UTF-8')
            app_output(filename)
            mode = 'valid'
            clientsocket.close()

            clientsocket, addr = serversocket.accept()
            incmdata = '1'

            try:
                somefile = open(filename, 'x')
                somefile.close()
            except:
                print('already exists?')

            while len(incmdata) !=0:
                incmdata = clientsocket.recv(1024 * 8)
                print('this is filename: ', filename)
                somefile=open(filename, 'ab')
                somefile.write(incmdata)
                somefile.close()
            app_output('file supposedly recieved')
            clientsocket.close()
            mode = 'valid'

'''
will need to look into it once i finish working with pipe
        if mode == 'sm':
            print('\n if trigerred \n')
            clientsocket, addr = serversocket.accept()
            incmdata = clientsocket.recv(1024)
            app_output(incmdata.decode('UTF-8'))
            mode = 'multiline'
            clientsocket.close()

'''

def send():
    print('supposedly sending')
    try:
        destination = positional_parameter[1]
#trying to accept address from console if it exists
#note to myself, when data send over 'sock.send' more than ones - on server side it appears as same stream
    except:
        print ('destination filled?\n')

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((destination, port))
    sock.send(mode.encode('UTF-8'))
    sock.close()
    if mode == 'sl':
        clear_screen()
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((destination, port))
        data_to_be_send = ' '.join(positional_parameter[2:])
        sock.send(data_to_be_send.encode('UTF-8'))
        print(data_to_be_send, '- this is what is send\n')
        sock.close

    if mode == 'sp':
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((destination, port))
        user_input=(sys.stdin.read())
#        print ('debug', user_input)
        sock.send(user_input.encode())
#to send file is next
    if mode == 'sf':

        clear_screen()
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((destination, port))
        filename = ' '.join(positional_parameter[2:])
        filename = os.path.basename(filename)
        sock.send(filename.encode('UTF-8'))

        print(filename, '- name of file\n')
        sock.close


        path=str(*positional_parameter[2:])
        #        print (path, '-this will be send\n')
        with open(path, 'rb') as file_to_be_send:
            contents = file_to_be_send.read()
#            print (contents)
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect((destination, port))
#        user_input=(sys.stdin.read())
#            print ('debug', file_to_be_send.read())
        sock.send(contents)

        file_to_be_send.close()
    app_output('file supposedly send\n')



def chat():
    print('chat to be implemented, not ready yet')

def gui():
    if type_of_app == 'console':
        help_msg()


if mode == 'l':
    listen()
if mode == 'sl':
    send()
if mode == 'sm':
    send()
if mode == 'sp':
    send()
if mode == 'sf':
    send()
if mode == 'c':
    chat()
if mode == 'g':
    gui()
if mode == 'no parameters':
    help_msg()
    listen()
